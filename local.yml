version: '3'

volumes:
  highfeature_dashboard_local_postgres_data: {}
  highfeature_dashboard_local_postgres_data_backups: {}

services:
  django: &django
    build:
      context: .
      dockerfile: ./compose/local/django/Dockerfile
    image: highfeature_dashboard_local_django
    container_name: highfeature_dashboard_local_django
    depends_on:
      - postgres
      - redis
    volumes:
      - .:/app:z
    env_file:
      - ./.envs/.local/.django
      - ./.envs/.local/.postgres
    ports:
      - '8010:8000'
    command: /start

  postgres:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: highfeature_dashboard_production_postgres
    container_name: highfeature_dashboard_local_postgres
    volumes:
      - highfeature_dashboard_local_postgres_data:/var/lib/postgresql/data
      - highfeature_dashboard_local_postgres_data_backups:/backups
    env_file:
      - ./.envs/.local/.postgres

  docs:
    image: highfeature_dashboard_local_docs
    container_name: highfeature_dashboard_local_docs
    build:
      context: .
      dockerfile: ./compose/local/docs/Dockerfile
    env_file:
      - ./.envs/.local/.django
    volumes:
      - ./docs:/docs:z
      - ./config:/app/config:z
      - ./highfeature_dashboard:/app/highfeature_dashboard:z
    ports:
      - '9000:9000'
    command: /start-docs

  rabbitmq:
    # There is a prebuilt RabbitMQ image; see
    # https://hub.docker.com/_/rabbitmq/ for details.
    # This variant is built on Alpine Linux (it's smaller) and includes
    # the management UI.
    image: rabbitmq:3.12-management-alpine
    container_name: highfeature_dashboard_local_rabbitmq
    # These ports are exposed on the host; 'hostport:containerport'.
    # You could connect to this server from outside with the *host's*
    # DNS name or IP address and port 5672 (the left-hand side of the
    # colon).
    ports:
      # The standard AMQP protocol port
      - 5672:5672
      # HTTP management UI
      - 15672:15672
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=password
    # Run this container on a private network for this application.
    # This is necessary for magic Docker DNS to work: other containers
    # also running on this network will see a host name "rabbitmq"
    # (the name of this section) and the internal port 5672, even though
    # that's not explicitly published above.
#    networks:
#      - network


  redis:
    image: docker.io/redis:6
    container_name: highfeature_dashboard_local_redis

  celeryworker:
    <<: *django
    image: highfeature_dashboard_local_celeryworker
    container_name: highfeature_dashboard_local_celeryworker
    depends_on:
      - redis
      - postgres
    ports: []
    command: /start-celeryworker

  celerybeat:
    <<: *django
    image: highfeature_dashboard_local_celerybeat
    container_name: highfeature_dashboard_local_celerybeat
    depends_on:
      - redis
      - postgres
    ports: []
    command: /start-celerybeat

  flower:
    <<: *django
    image: highfeature_dashboard_local_flower
    container_name: highfeature_dashboard_local_flower
    ports:
      - '5555:5555'
    command: /start-flower
